{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst db = require('../db');\n\n// Function to generate a unique ticket number\nconst generateTicketNumber = () => {\n  return `TKT${Date.now()}`;\n};\n\n// Pre-order from a store\nrouter.post('/stores/:storeId/preorder', (req, res) => {\n  const {\n    storeId\n  } = req.params;\n  const {\n    userId,\n    idNumber,\n    items,\n    pickupTime\n  } = req.body;\n  const now = new Date();\n  const ticketNumber = generateTicketNumber();\n  console.log(\"Preorder request received:\", req.body); // Add this line for debugging\n\n  const orderDetails = items.map(item => `(${storeId}, ${userId}, '${idNumber}', ${item.id}, ${item.quantity}, '${pickupTime}', '${now.toISOString()}', '${ticketNumber}')`).join(',');\n  const query = `INSERT INTO preorders (store_id, user_id, id_number, item_id, quantity, pickup_time, created_at, ticket_number) VALUES ${orderDetails}`;\n  db.query(query, (err, result) => {\n    if (err) {\n      console.error('Error executing query:', err);\n      res.status(500).send('Server error');\n    } else {\n      // Add notification\n      const notificationQuery = 'INSERT INTO notifications (type, details, created_at) VALUES (?, ?, ?)';\n      const notificationDetails = `Pre-order by user ${userId} at store ${storeId}. Ticket Number: ${ticketNumber}`;\n      db.query(notificationQuery, ['preorder', notificationDetails, now], notificationErr => {\n        if (notificationErr) {\n          console.error('Error executing notification query:', notificationErr);\n          res.status(500).send('Server error');\n        } else {\n          res.json({\n            message: 'Pre-order placed successfully',\n            ticketNumber\n          });\n        }\n      });\n    }\n  });\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","db","generateTicketNumber","Date","now","post","req","res","storeId","params","userId","idNumber","items","pickupTime","body","ticketNumber","console","log","orderDetails","map","item","id","quantity","toISOString","join","query","err","result","error","status","send","notificationQuery","notificationDetails","notificationErr","json","message","module","exports"],"sources":["C:/Users/osheenconstable/dine-campus/src/components/Preorder.js"],"sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst db = require('../db');\r\n\r\n// Function to generate a unique ticket number\r\nconst generateTicketNumber = () => {\r\n    return `TKT${Date.now()}`;\r\n};\r\n\r\n// Pre-order from a store\r\nrouter.post('/stores/:storeId/preorder', (req, res) => {\r\n    const { storeId } = req.params;\r\n    const { userId, idNumber, items, pickupTime } = req.body;\r\n    const now = new Date();\r\n    const ticketNumber = generateTicketNumber();\r\n\r\n    console.log(\"Preorder request received:\", req.body); // Add this line for debugging\r\n\r\n    const orderDetails = items.map(item => `(${storeId}, ${userId}, '${idNumber}', ${item.id}, ${item.quantity}, '${pickupTime}', '${now.toISOString()}', '${ticketNumber}')`).join(',');\r\n    const query = `INSERT INTO preorders (store_id, user_id, id_number, item_id, quantity, pickup_time, created_at, ticket_number) VALUES ${orderDetails}`;\r\n\r\n    db.query(query, (err, result) => {\r\n        if (err) {\r\n            console.error('Error executing query:', err);\r\n            res.status(500).send('Server error');\r\n        } else {\r\n            // Add notification\r\n            const notificationQuery = 'INSERT INTO notifications (type, details, created_at) VALUES (?, ?, ?)';\r\n            const notificationDetails = `Pre-order by user ${userId} at store ${storeId}. Ticket Number: ${ticketNumber}`;\r\n            db.query(notificationQuery, ['preorder', notificationDetails, now], (notificationErr) => {\r\n                if (notificationErr) {\r\n                    console.error('Error executing notification query:', notificationErr);\r\n                    res.status(500).send('Server error');\r\n                } else {\r\n                    res.json({ message: 'Pre-order placed successfully', ticketNumber });\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,EAAE,GAAGH,OAAO,CAAC,OAAO,CAAC;;AAE3B;AACA,MAAMI,oBAAoB,GAAGA,CAAA,KAAM;EAC/B,OAAO,MAAMC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;AAC7B,CAAC;;AAED;AACAL,MAAM,CAACM,IAAI,CAAC,2BAA2B,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACnD,MAAM;IAAEC;EAAQ,CAAC,GAAGF,GAAG,CAACG,MAAM;EAC9B,MAAM;IAAEC,MAAM;IAAEC,QAAQ;IAAEC,KAAK;IAAEC;EAAW,CAAC,GAAGP,GAAG,CAACQ,IAAI;EACxD,MAAMV,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;EACtB,MAAMY,YAAY,GAAGb,oBAAoB,CAAC,CAAC;EAE3Cc,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEX,GAAG,CAACQ,IAAI,CAAC,CAAC,CAAC;;EAErD,MAAMI,YAAY,GAAGN,KAAK,CAACO,GAAG,CAACC,IAAI,IAAI,IAAIZ,OAAO,KAAKE,MAAM,MAAMC,QAAQ,MAAMS,IAAI,CAACC,EAAE,KAAKD,IAAI,CAACE,QAAQ,MAAMT,UAAU,OAAOT,GAAG,CAACmB,WAAW,CAAC,CAAC,OAAOR,YAAY,IAAI,CAAC,CAACS,IAAI,CAAC,GAAG,CAAC;EACpL,MAAMC,KAAK,GAAG,0HAA0HP,YAAY,EAAE;EAEtJjB,EAAE,CAACwB,KAAK,CAACA,KAAK,EAAE,CAACC,GAAG,EAAEC,MAAM,KAAK;IAC7B,IAAID,GAAG,EAAE;MACLV,OAAO,CAACY,KAAK,CAAC,wBAAwB,EAAEF,GAAG,CAAC;MAC5CnB,GAAG,CAACsB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,cAAc,CAAC;IACxC,CAAC,MAAM;MACH;MACA,MAAMC,iBAAiB,GAAG,wEAAwE;MAClG,MAAMC,mBAAmB,GAAG,qBAAqBtB,MAAM,aAAaF,OAAO,oBAAoBO,YAAY,EAAE;MAC7Gd,EAAE,CAACwB,KAAK,CAACM,iBAAiB,EAAE,CAAC,UAAU,EAAEC,mBAAmB,EAAE5B,GAAG,CAAC,EAAG6B,eAAe,IAAK;QACrF,IAAIA,eAAe,EAAE;UACjBjB,OAAO,CAACY,KAAK,CAAC,qCAAqC,EAAEK,eAAe,CAAC;UACrE1B,GAAG,CAACsB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,cAAc,CAAC;QACxC,CAAC,MAAM;UACHvB,GAAG,CAAC2B,IAAI,CAAC;YAAEC,OAAO,EAAE,+BAA+B;YAAEpB;UAAa,CAAC,CAAC;QACxE;MACJ,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;AACN,CAAC,CAAC;AAEFqB,MAAM,CAACC,OAAO,GAAGtC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}